name: "构建immortalwrt24.10-X64固件"

on:
  repository_dispatch:
    types: 
      - immortalwrt-group-update
  workflow_dispatch:
  # 已注释掉定期自动编译，仅在上游更新或手动触发时编译
  # schedule:
  #   - cron: '20 16 */7 * *'    # 每 7 天北京时间 00:20

env:
  # ───── 源码与脚本 ─────
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: ImmortalWrt_x64.config
  DIY_P1_SH: ImmortalWrt-diy-part1.sh
  DIY_P2_SH: ImmortalWrt-diy-part2.sh

  # ───── 上传/发布选项 ─────
  UPLOAD_FIRMWARE: 'true'
  UPLOAD_RELEASE: 'true'

  # ───── 构建参数 ─────
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive



jobs:
  build-firmware:
    name: 构建固件
    runs-on: ubuntu-22.04
    concurrency:
      group: immortalwrt-${{ github.ref }}  # 按分支隔离并发
      cancel-in-progress: true             # 取消旧任务，执行最新任务
    permissions:
      contents: write   # 允许推送构建产物到仓库
      actions: write    # 允许触发其他工作流

    steps:
# 1️⃣ 检出仓库并记录开始时间
    - name: 检出仓库
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: 记录开始时间
      run: |
        echo "TIME0=$(date '+%Y-%m-%d %H:%M:%S')" >> "$GITHUB_ENV"
        echo "RELEASE_TAG=$(date '+%Y.%m.%d-%H%M')" >> "$GITHUB_ENV"
        
# 2️⃣ 准备构建环境
    - name: 准备构建环境
      env: { DEBIAN_FRONTEND: noninteractive }
      run: |
        sudo rm -rf /usr/share/{dotnet,man,doc,groff,info,lintian,linda,locale} \
                    /usr/local/lib/android /opt/ghc /usr/lib/jvm /usr/share/swift \
                    /usr/local/go /opt/hostedtoolcache/* /usr/share/az_*
        sudo docker system prune -af --volumes || true
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y --no-install-recommends \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd

        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir 
        sudo chown $USER:$GROUPS /mnt/workdir

# 3️⃣ 克隆源码
    - name: 克隆 ImmortalWrt 源码
      working-directory: /mnt/workdir
      run: |
          df -hT $PWD
          git clone -b $REPO_BRANCH --single-branch --filter=blob:none $REPO_URL immortalwrt
          ln -sf $PWD/immortalwrt $GITHUB_WORKSPACE/immortalwrt


    # 5️⃣ 自定义 feeds，DIY_P1_SH
    - name: 应用自定义feeds和DIY_P1_SH
      run: |
        ##[ -e $FEEDS_CONF ] && mv $FEEDS_CONF immortalwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd immortalwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH


    # 6️⃣ 更新和安装 feeds
    - name: 更新和安装 feeds
      run: |
        cd immortalwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a -f


    # 7️⃣ 自定义配置config，DIY_P2_SH
    - name: 自定义配置config，DIY_P2_SH
      run: |
        [ -e "ImmortalWrt_Files" ] && mv ImmortalWrt_Files immortalwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config
        chmod +x $DIY_P2_SH
        cd immortalwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH        


    # 8️⃣ 通过API生成上游一周更新日志
    - name: 通过API生成上游一周更新日志
      run: |
        echo "CHANGELOG_CONTENT<<EOF" > changelog_env.txt
        echo "-  🔧 [immortalwrt_主仓库](https://github.com/immortalwrt/immortalwrt)" >> changelog_env.txt
        curl -s "https://api.github.com/repos/immortalwrt/immortalwrt/commits?since=$(date -d '-7 days' --iso-8601=s)" \
          | jq -r '.[]? | select(.commit != null) | "- [\(.commit.committer.date)] \(.commit.message | split("\n")[0])"' >> changelog_env.txt 2>/dev/null || true
        echo "-  📦 [immortalwrt_packages](https://github.com/immortalwrt/packages)" >> changelog_env.txt
        curl -s "https://api.github.com/repos/immortalwrt/packages/commits?since=$(date -d '-7 days' --iso-8601=s)" \
          | jq -r '.[]? | select(.commit != null) | "- [\(.commit.committer.date)] \(.commit.message | split("\n")[0])"' >> changelog_env.txt 2>/dev/null || true
        echo "-  🖥️ [immortalwrt_luci](https://github.com/immortalwrt/luci)" >> changelog_env.txt
        curl -s "https://api.github.com/repos/immortalwrt/luci/commits?since=$(date -d '-7 days' --iso-8601=s)" \
          | jq -r '.[]? | select(.commit != null) | "- [\(.commit.committer.date)] \(.commit.message | split("\n")[0])"' >> changelog_env.txt 2>/dev/null || true
        echo "EOF" >> changelog_env.txt
        cat changelog_env.txt >> $GITHUB_ENV

    # 9️⃣ 下载源代码包
    - name: 下载源代码包
      id: package
      run: |
          cd immortalwrt
          make defconfig
          make download -j8
          # 清理不完整的下载文件
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -hT
          # 显示下载目录大小
          du -sh dl
          # 进一步清理不必要的文件
          sudo rm -rf /tmp/* /var/tmp/*


    # 🔟 编译固件
    - name: 编译固件
      id: compile
      run: |
          cd immortalwrt
          make V=s -j2 || make V=s -j1

    # 1️⃣1️⃣ 整理固件
    - name: 整理输出路径
      id: organize
      run: |
          cd immortalwrt/bin/targets/*/*
          rm -rf packages
          df -hT  
          echo "FIRMWARE_DIR=$PWD" >> $GITHUB_ENV
          echo "TIME1=$(date '+%Y-%m-%d %H:%M:%S')" >> "$GITHUB_ENV"

       # 1️⃣2️⃣ 计算编译耗时
    - name: 计算编译耗时
      run: |
        # 将 TIME0 和 TIME1 转换为 Unix 时间戳（秒）
        START_TIME=$(date -u -d "${{ env.TIME0 }}" +%s)
        END_TIME=$(date -u -d "${{ env.TIME1 }}" +%s)
        # 计算时间差（秒）
        ELAPSED_SECONDS=$((END_TIME - START_TIME))
        # 格式化为 HHh MMm SSs
        ELAPSED_FORMATTED=$(printf "%02dh %02dm %02ds" $((ELAPSED_SECONDS/3600)) $((ELAPSED_SECONDS%3600/60)) $((ELAPSED_SECONDS%60)))
        # 输出结果到环境变量
        echo "ELAPSED=$ELAPSED_FORMATTED" >> $GITHUB_ENV
        echo "::notice::总耗时: $ELAPSED"
        #检查固件目录内容
        ls -lh ${{ env.FIRMWARE_DIR }}

    # 1️⃣3️⃣ 上传固件产物
    - name: 上传固件产物
      if: env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@v4
      with:
          name: immortalwrt24.10-${{ github.run_number }}
          path: ${{ env.FIRMWARE_DIR }}

   # 1️⃣4️⃣ 创建 GitHub 发布版本
    - name: 创建 GitHub 发布版本
      if: env.UPLOAD_RELEASE == 'true'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}      
      with:
          tag_name: immortalwrt24.10-${{ env.RELEASE_TAG }}
          name: immortalwrt24.10-X64-${{ env.RELEASE_TAG }}
          body: |
            📦 **编译时间段**  
            ⏰ 从 **${{ env.TIME0 }}** 到 **${{ env.TIME1 }}**  
            🕒 **总耗时：${{ env.ELAPSED }}**
            🔄 **上游更新日志**  
               ${{ env.CHANGELOG_CONTENT || '无更新日志内容' }}
          files: ${{ env.FIRMWARE_DIR }}/*

    # 1️⃣5️⃣ 清理旧 Workflow 记录
    - name: 清理旧 Workflow 记录
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        retain_days: 3
        keep_minimum_runs: 3

   # 1️⃣6️⃣ 清理旧版本
    - name: 清理旧 Release
      if: env.UPLOAD_RELEASE == 'true' 
      env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
          keep_latest: 12
          delete_tags: true

