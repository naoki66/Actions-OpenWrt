name: imagebuilder编译21.02.7
on: 
  workflow_dispatch:
  repository_dispatch:
    types:
      - Tag_updated
  schedule:
  - cron: "50  3 * * 1"

env:
  TZ: Asia/Shanghai


jobs:
  build:
    runs-on: ubuntu-22.04
    steps:

    - name: 删除文件
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"


    - name: 显示系统情况
      run: |
        lscpu
        free -h
        df -Th
        uname -a
        echo "TIME1=$(date "+%Y年%m月%d日%H时%M分")" >> $GITHUB_ENV

    - name: 安装依赖文件
      run: |
        sudo -E apt update -y
        sudo -E apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
        libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip zstd \
        vim wget xmlto xxd zlib1g-dev python3-setuptools

    - name: 下载imagebuilder源码
      run: |
        wget https://downloads.immortalwrt.org/releases/21.02.7/targets/x86/64/immortalwrt-imagebuilder-21.02.7-x86-64.Linux-x86_64.tar.xz
        tar -J -x -f immortalwrt-imagebuilder-21.02.7-x86-64.Linux-x86_64.tar.xz
        

    - name: 修改配置和编译文件
      run: |
        cd immortalwrt-imagebuilder-21.02.7-x86-64.Linux-x86_64
        sed -i 's/CONFIG_TARGET_ROOTFS_EXT4FS=y/#CONFIG_TARGET_ROOTFS_EXT4FS is not set/' .config
        sed -i 's/CONFIG_TARGET_EXT4_RESERVED_PCT=0/#CONFIG_TARGET_EXT4_RESERVED_PCT=0 is not set/' .config
        sed -i 's/CONFIG_TARGET_EXT4_BLOCKSIZE_4K=y/#CONFIG_TARGET_EXT4_BLOCKSIZE_4K is not set/' .config
        sed -i 's/CONFIG_TARGET_EXT4_BLOCKSIZE=4096/#CONFIG_TARGET_EXT4_BLOCKSIZE is not set/' .config
        sed -i 's/CONFIG_TARGET_EXT4_JOURNAL=y/#CONFIG_TARGET_EXT4_JOURNAL is not set/' .config
        sed -i 's/CONFIG_ISO_IMAGES=y/#CONFIG_ISO_IMAGES is not set/' .config
        sed -i 's/CONFIG_QCOW2_IMAGES=y/#CONFIG_QCOW2_IMAGES is not set/' .config
        sed -i 's/CONFIG_VDI_IMAGES=y/#CONFIG_VDI_IMAGES is not set/' .config
        sed -i 's/CONFIG_VMDK_IMAGES=y/#CONFIG_VMDK_IMAGES is not set/' .config
        sed -i 's/CONFIG_VHDX_IMAGES=y/#CONFIG_VHDX_IMAGES is not set/' .config        
        sed -i 's/CONFIG_TARGET_ROOTFS_PARTSIZE=300/CONFIG_TARGET_ROOTFS_PARTSIZE=512/' .config
        sed -i 's/CONFIG_TARGET_PREINIT_IP="192.168.1.1"/CONFIG_TARGET_PREINIT_IP="192.168.10.1"/' .config
        sed -i 's/CONFIG_TARGET_PREINIT_BROADCAST="192.168.1.255"/CONFIG_TARGET_PREINIT_BROADCAST="192.168.10.255"/' .config

    - name: 添加非官方包
      run: |
        cd immortalwrt-imagebuilder-21.02.7-x86-64.Linux-x86_64
        wget -P ./packages https://github.com/sirpdboy/luci-app-ddns-go/releases/download/v6.12.0/ddns-go_6.12.0-r11_x86_64.ipk
        wget -P ./packages https://github.com/sirpdboy/luci-app-ddns-go/releases/download/v6.12.0/luci-app-ddns-go_1.5.4-r20250601_all.ipk
        wget -P ./packages https://github.com/sirpdboy/luci-app-ddns-go/releases/download/v6.12.0/luci-i18n-ddns-go-zh-cn_25.135.22407.89837ec_all.ipk     
        wget -P ./packages https://github.com/tty228/luci-app-wechatpush/releases/download/v2.06.2/luci-app-serverchan_2.06.2_all.ipk
        wget -P ./packages https://github.com/gdy666/luci-app-lucky/releases/download/v2.19.4/luci-app-lucky_2.2.2-r1_all.ipk
        wget -P ./packages https://github.com/gdy666/luci-app-lucky/releases/download/v2.19.4/luci-i18n-lucky-zh-cn_25.051.13443.e78d498_all.ipk
        wget -P ./packages https://github.com/gdy666/luci-app-lucky/releases/download/v2.19.4/lucky_2.19.4_Openwrt_x86_64.ipk
        wget -P ./packages https://github.com/xiaorouji/openwrt-passwall/releases/download/25.9.23-1/luci-19.07_luci-app-passwall_25.9.23-1_all.ipk
        wget -P ./packages https://github.com/xiaorouji/openwrt-passwall/releases/download/25.9.23-1/luci-19.07_luci-i18n-passwall-zh-cn_25.9.23-1_all.ipk
        wget -P ./packages https://github.com/xiaorouji/openwrt-passwall/releases/download/25.9.23-1/passwall_packages_ipk_x86_64.zip        
        unzip ./packages/passwall_packages_ipk_x86_64.zip -d ./packages/
 
        
    - name: 编译
      id: compile
      run: |
        cd immortalwrt-imagebuilder-21.02.7-x86-64.Linux-x86_64
        make image PACKAGES="qemu-ga pppoe-discovery luci-i18n-smartdns-zh-cn luci-i18n-passwall-zh-cn luci-i18n-zerotier-zh-cn luci-i18n-ttyd-zh-cn luci-i18n-attendedsysupgrade-zh-cn luci-i18n-opkg-zh-cn luci-i18n-ddns-zh-cn ddns-scripts-dnspod luci-i18n-upnp-zh-cn luci-i18n-firewall-zh-cn luci-i18n-vlmcsd-zh-cn luci-i18n-arpbind-zh-cn luci-i18n-base-zh-cn   luci-i18n-filetransfer-zh-cn ddns-scripts-cloudflare ddns-scripts_aliyun  luci-i18n-udpxy-zh-cn luci-i18n-accesscontrol-zh-cn luci-i18n-watchcat-zh-cn bind-host luci-i18n-ddns-go-zh-cn luci-i18n-wireguard-zh-cn luci-app-wechatpush luci-app-ddns-go"
        echo "FILE_DATE=$(date +"%Y%m%d-%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    
    - name: 整理文件
      id: organize
      run: |
        cd immortalwrt-imagebuilder-21.02.7-x86-64.Linux-x86_64/bin/targets/*/*
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传firmware文件夹
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: imagebuilder-21.02.7-x86-64-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        
    - name: 创建 release 标签
      id: tag
      run: |
        echo "release_tag=imagebuilder21.02.7-x86-64-${{ env.FILE_DATE }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo " ⏏️ imagebuilder编译信息" >> release.txt
        echo "ImmortalWrt-21.02.7-x64" >> release.txt
        echo "🔗https://downloads.immortalwrt.org/releases/21.02.7/targets/x86/64/" >> release.txt
        echo "⏰编译完成时间：$(date "+%Y年%m月%d日%H时%M分")" >> release.txt        
        echo "TIME2=$(date "+%Y年%m月%d日%H时%M分")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传发布release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TRIGGER_PAT }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        
    - name: 删除运行的工作流
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.ACTIONS_TRIGGER_PAT }}
        retain_days: 5
        keep_minimum_runs: 3

    - name: 删除旧RReleases
      uses: ophub/delete-releases-workflows@main
      with:
        delete_releases: true
        releases_keep_latest: 12
        delete_workflows: true
        workflows_keep_day: 7
        delete_tags: true
        gh_token: ${{ secrets.ACTIONS_TRIGGER_PAT }}

               
    - name: Pushplus推送通知
      if: steps.tag.outputs.status == 'success' && !cancelled()
      run: curl http://www.pushplus.plus/send -X POST -H "Content-Type:application/json" -d '{"title":"imagebuilder编译immortalwrt21.02.7成功！","content":" 从${{ env.TIME1 }}开始到${{ env.TIME2 }}编译完成！","token":"${{ secrets.PUSHPLUS_TOKEN }}","webhook":"02","channel":"cp"}'
